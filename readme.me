 Changes Made in Commit 'development 3.1.0'

Updated Authentication View

In the authentication view, we have replaced the usage of a 256-character token generated by the secrets module with the CSRF token. The import statement for the secrets module and the code secrets.token_hex(256), which generated the unique token, have been removed. Instead, the CSRF token is now saved in session.session[] using the key 'rT7gM2sP5qW8jN4'. This simplifies its use in consumers.py.
Database Configuration

The PostgreSQL database connection password has been updated with new credentials in the settings.py file.
JavaScript Function Update in Template

In the MultiplayerOnline application, the JavaScript function checkMatchStatus within the buttons_play.html template has been updated. A new condition, game_status = playing, has been added when searching for a match. This allows the script to recognize both 'playing' and 'completed' statuses when searching for matches in the lobbies and retrieving information from the backend. For example:

javascript

if (data.game_status === 'completed' || data.game_status === 'playing') {
    console.log('Match status is: ' + data.game_status);
    clearInterval(interval); // Stop the verification
    window.location.href = '/chess/' + data.id;
} else {
    console.log('Match status is', data.game_status);
    console.log('ID:', data.id);
}

Changes in consumer.py

In the MultiplayerOnline application, the consumer has been updated to verify the user before accepting the connection. This change helps to avoid potential bugs if the user is not authenticated.

The code has been updated to work with the new cookie added in the authentication apps. New conditions have been added for matches that are in progress or playing. Additionally, the chess match status and the FEN (Forsyth-Edwards Notation) format of the board are now saved in the database.
Cookie Handling

The code handling the 'cookie' has been updated because the same cookie was previously used for both players, which was incorrect. The following changes were made:

python

self.chess_match['white'] = [self.match_query.white_player, 'cookie']
self.chess_match['black'] = [self.match_query.black_player, 'cookie']

Handling Disconnections

A conditional has been added to assign a variable based on whose turn it is when the socket connection is disconnected:

python

if chess_match.turn:
    turn = 'white'
else:
    turn = 'black'

Sending Turn Data

In self.send, new data has been added to update the client with the status in the templates:

python

self.send({
    'turn': turn,
    # other data
})

Match Status Update

Code has been added to change the match status from 'Completed' to 'playing' when the match starts.
JavaScript Updates in chess.js

In the MultiplayerOnline application, a new variable this.chess_board_fen has been added to the Chess class in chess.js to save the board status on the client. A new method update_chessboard has been added to update the board if the client leaves the page.

To resolve the issue where the opponent could move your piece, the following condition was added at the top of the show_allowed_move method:

javascript

if (this.turn !== this.id) {
    return null;
}

WebSocket URL Update in socket.js

The url variable in socket.js has been updated to ensure the WebSocket connection always targets the server, resolving issues in production or when accessing from a device outside localhost:

javascript

const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
const socketUrl = ${protocol}//ws/Room/;
const socket = new WebSocket(socketUrl);

Views Update in MultiplayerOnline

In the MultiplayerOnline views, the condition and database request in CreateMatch have been updated to include the new status data 'playing'. This ensures accurate information retrieval from the database regarding the match statuses.
Additional Changes

    New HTML Files: Added board_black.html to rotate the board for the black perspective and renamed board.html to board_white.html.
    Template Updates: In chess.html, removed the condition {% if id == 'black' %} for board rotation. Instead, used include to import either board_white.html or board_black.html based on the player.
    Home Template: Removed a comment that caused an error in home.html due to the absence of board.html.
    Admin Configuration: In admin.py, added import for ChessLobbies and registered the model with admin.site.register to access database data from the Admin panel.
    Consumer Updates: In consumer.py, added an elif condition for checkmate! == game_status and implemented code to identify check and send relevant information to the client. Removed an unused variable piece.
    Model Updates: Changed a comment in model.py to reflect all possible game statuses, including changing 'finished' to 'Check Mate'.
    CSS Deletion: Deleted MultiplayerOnline/static/MultiplayerOnline/assets/css/rotate.css.
    Chess.js Updates: Added the upgrade_chessboard method with a board_fen argument to handle pawn promotion and visual indicators for check and En Passant rules.
    Socket.js Updates: Updated the board after a move and added conditions to execute the king indicator when the server returns that the king is in check.

All these changes are related to the MultiplayerOnline application.
Version Update

Given the scope and nature of the changes, the new version should be incremented to 3.2.0.
Professional Transcription

Here's the professionally transcribed version:
Authentication View

The authentication view has been updated to utilize CSRF tokens instead of a 256-character token generated by the secrets module. The import statement for the secrets module and the secrets.token_hex(256) code, which generated a unique 256-character token, have been removed. The CSRF token is now stored in session.session[] with the key 'rT7gM2sP5qW8jN4', streamlining its use in consumers.py.
Database Configuration

The PostgreSQL database connection password has been updated in the settings.py file with new credentials.
JavaScript Function Update in Template

In the MultiplayerOnline application, the checkMatchStatus JavaScript function in the buttons_play.html template has been updated to include a new condition, game_status = playing, when searching for a match. This update enables the script to recognize both 'playing' and 'completed' statuses when querying for matches in the lobbies and retrieving backend information. For example:

javascript

if (data.game_status === 'completed' || data.game_status === 'playing') {
    console.log('Match status is: ' + data.game_status);
    clearInterval(interval); // Stop the verification
    window.location.href = '/chess/' + data.id;
} else {
    console.log('Match status is', data.game_status);
    console.log('ID:', data.id);
}

Changes in consumer.py

In the MultiplayerOnline application, the consumer now verifies the user before accepting the connection. This change is crucial to prevent potential bugs if the user is not authenticated. The code has been updated to work with the new cookie introduced in the authentication apps, and new conditions have been added for matches in progress or playing. Additionally, the chess match status and the FEN (Forsyth-Edwards Notation) format of the board are now saved in the database.
Cookie Handling

The cookie handling code has been updated to ensure different cookies for both players. The new implementation is as follows:

python

self.chess_match['white'] = [self.match_query.white_player, 'cookie']
self.chess_match['black'] = [self.match_query.black_player, 'cookie']

Handling Disconnections

A new conditional assigns a variable based on whose turn it is when the socket connection is disconnected:

python

if chess_match.turn:
    turn = 'white'
else:
    turn = 'black'

Sending Turn Data

New data has been added to self.send to update the client with the turn status in the templates:

python

self.send({
    'turn': turn,
    # other data
})

Match Status Update

Code has been added to change the match status from 'Completed' to 'playing' when the match starts.
JavaScript Updates in chess.js

A new variable this.chess_board_fen has been added to the Chess class in chess.js to save the board status on the client. A new method update_chessboard has been introduced to update the board if the client leaves the page. To resolve the issue where the opponent could move your piece, the following condition was added at the top of the show_allowed_move method:

javascript

if (this.turn !== this.id) {
    return null;
}

WebSocket URL Update in socket.js

The url variable in socket.js has been updated to ensure the WebSocket connection always targets the server, resolving production issues or when accessed from a device outside localhost:

javascript

const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
const socketUrl = ${protocol}//ws/Room/;
const socket = new WebSocket(socketUrl);

Views Update in MultiplayerOnline

In MultiplayerOnline views, the condition and database request in CreateMatch have been updated to include the new status data 'playing'. This ensures accurate information retrieval from the database regarding the match statuses.
Additional Changes

    New HTML Files: Added board_black.html to rotate the board for the black perspective and renamed board.html to board_white.html.
    Template Updates: In chess.html, removed the condition {% if id == 'black' %} for board rotation. Instead, used include to import either board_white.html or board_black.html based on the player.
    Home Template: Removed a comment that caused an error in home.html due to the absence of board.html.
    Admin Configuration: In admin.py, added import for ChessLobbies and registered the model with admin.site.register to access database data from the Admin panel.
    Consumer Updates: In consumer.py, added an elif condition for checkmate! == game_status and implemented code to identify check and send relevant information to the client. Removed an unused variable piece.
    Model Updates: Changed a comment in model.py to reflect all possible game statuses, including changing 'finished' to 'Check Mate'.
    CSS Deletion: Deleted MultiplayerOnline/static/MultiplayerOnline/assets/css/rotate.css.
    Chess.js Updates: Added the upgrade_chessboard method with a board_fen argument to handle pawn promotion and visual indicators for check and En Passant rules.
    Socket.js Updates: Updated the board after a move and added conditions to execute the king indicator when the server returns that the king is in check.

All these changes are related to the MultiplayerOnline application. Given the scope and nature of the changes, the new version is 3.1.0